package vn.fu_ohayo.service.impl;

import com.microsoft.cognitiveservices.speech.PronunciationAssessmentResult;
import org.springframework.stereotype.Service;
import vn.fu_ohayo.dto.response.ProgressDialogueResponse;
import vn.fu_ohayo.dto.response.PronunciationResultResponse;
import vn.fu_ohayo.entity.Dialogue;
import vn.fu_ohayo.entity.ProgressDialogue;
import vn.fu_ohayo.entity.PronunciationResult;
import vn.fu_ohayo.entity.User;
import vn.fu_ohayo.enums.ErrorEnum;
import vn.fu_ohayo.enums.ProgressStatus;
import vn.fu_ohayo.exception.AppException;
import vn.fu_ohayo.mapper.ProgressDialogueMapper;
import vn.fu_ohayo.repository.ProgressDialogueRepository;
import vn.fu_ohayo.repository.PronunciationResultRepository;
import vn.fu_ohayo.service.ProgressDialogueService;

import java.util.ArrayList;
import java.util.List;

@Service
public class ProgressDialogueServiceImp implements ProgressDialogueService {
    private final ProgressDialogueMapper progressDialogueMapper;
    private final ProgressDialogueRepository progressDialogueRepository;
    private final PronunciationResultRepository pronunciationResultRepository;

    public ProgressDialogueServiceImp(ProgressDialogueMapper progressDialogueMapper, ProgressDialogueRepository progressDialogueRepository, PronunciationResultRepository pronunciationResultRepository) {
        this.progressDialogueMapper = progressDialogueMapper;
        this.progressDialogueRepository = progressDialogueRepository;
        this.pronunciationResultRepository = pronunciationResultRepository;
    }

    @Override
    public ProgressDialogueResponse getProgressByUserAndDialogue(User user, Dialogue dialogue) {
        ProgressDialogue progressDialogue = progressDialogueRepository.findByUserAndDialogue(user, dialogue);
        if (progressDialogue == null) {
            throw new AppException(ErrorEnum.PROGRESS_NOT_FOUND);
        }
        return progressDialogueMapper.toProgressDialogueResponse(progressDialogue);
    }

    @Override
    public ProgressDialogueResponse handleCreateOrUpdateDialogueProgress(User user, Dialogue dialogue, PronunciationResult pronunciationResult) {
        ProgressDialogue progressDialogue = progressDialogueRepository.findByUserAndDialogue(user, dialogue);

        if (progressDialogue == null) {
            progressDialogue = ProgressDialogue.builder()
                    .user(user)
                    .dialogue(dialogue)
                    .progressStatus(ProgressStatus.COMPLETED)
                    .build();
        } else {
            PronunciationResult existingResult = progressDialogue.getPronunciationResult();
            if (existingResult != null) {
                progressDialogue.setPronunciationResult(null); // üëâ G·ª° li√™n k·∫øt tr∆∞·ªõc
                progressDialogueRepository.save(progressDialogue); // üëâ Save l·∫°i ƒë·ªÉ tr√°nh l·ªói reference

                pronunciationResultRepository.delete(existingResult); // üëâ B√¢y gi·ªù m·ªõi xo√°
            }
        }

        pronunciationResult = pronunciationResultRepository.save(pronunciationResult); // üëâ Ensure saved instance
        progressDialogue.setPronunciationResult(pronunciationResult); // üëâ G√°n sau khi ƒë√£ l∆∞u
        progressDialogue = progressDialogueRepository.save(progressDialogue); // üëâ Save cha sau c√πng
        return progressDialogueMapper.toProgressDialogueResponse(progressDialogue);
    }

    @Override
    public PronunciationResultResponse toPronunciationResultResponse(PronunciationResult pronunciationResult) {
        return PronunciationResultResponse.builder()
                .prosodyScore(pronunciationResult.getProsodyScore())
                .fluencyScore(pronunciationResult.getFluencyScore())
                .pronunciationScore(pronunciationResult.getPronunciationScore())
                .completenessScore(pronunciationResult.getCompletenessScore())
                .accuracyScore(pronunciationResult.getAccuracyScore())
                .recognizedText(pronunciationResult.getRecognizedText())
                .advices(getAdviceFromAssessment(pronunciationResult))
                .build();
    }

    private List<String> getAdviceFromAssessment(PronunciationResult paResult) {
        List<String> adviceList = new ArrayList<>();

        // Accuracy: ƒê·ªô ch√≠nh x√°c so v·ªõi c√¢u m·∫´u
        if (paResult.getAccuracyScore() < 60) {
            adviceList.add("üîç Ph√°t √¢m nhi·ªÅu t·ª´ ch∆∞a ch√≠nh x√°c. H√£y luy·ªán t·∫≠p ph√°t √¢m t·ª´ng t·ª´ ri√™ng bi·ªát.");
        } else if (paResult.getAccuracyScore() < 85) {
            adviceList.add("‚úÖ Ph√°t √¢m t∆∞∆°ng ƒë·ªëi ch√≠nh x√°c, h√£y ch√∫ √Ω h∆°n ·ªü c√°c √¢m ti·∫øt kh√≥.");
        } else {
            adviceList.add("üåü Ph√°t √¢m r·∫•t ch√≠nh x√°c, h√£y ti·∫øp t·ª•c gi·ªØ phong ƒë·ªô!");
        }

        // Completeness: ƒê·ªçc ƒë·∫ßy ƒë·ªß t·ª´ kh√¥ng
        if (paResult.getCompletenessScore() < 60) {
            adviceList.add("üß© M·ªôt s·ªë t·ª´ b·ªã b·ªè s√≥t khi ƒë·ªçc. H√£y luy·ªán t·∫≠p ƒë·ªçc tr·ªçn v·∫πn c√¢u.");
        } else if (paResult.getCompletenessScore() < 85) {
            adviceList.add("üìñ ƒêa s·ªë t·ª´ ƒë√£ ƒë∆∞·ª£c ƒë·ªçc, nh∆∞ng c√≥ th·ªÉ luy·ªán ƒë·ªçc r√µ r√†ng h∆°n n·ªØa.");
        } else {
            adviceList.add("‚úÖ B·∫°n ƒë·ªçc ƒë·ªß v√† r√µ to√†n b·ªô n·ªôi dung.");
        }

        // Fluency: ƒê·ªçc tr√¥i ch·∫£y
        if (paResult.getFluencyScore() < 60) {
            adviceList.add("‚è≥ B·∫°n ƒë·ªçc c√≤n ng·∫Øt qu√£ng. H√£y luy·ªán ƒë·ªçc v·ªõi nh·ªãp ƒëi·ªáu ƒë·ªÅu.");
        } else if (paResult.getFluencyScore() < 85) {
            adviceList.add("üó£Ô∏è B·∫°n ƒë·ªçc kh√° tr√¥i ch·∫£y, nh∆∞ng n√™n c·∫£i thi·ªán th√™m ng·ªØ ƒëi·ªáu.");
        } else {
            adviceList.add("üéØ B·∫°n ƒë·ªçc r·∫•t tr√¥i ch·∫£y v√† t·ª± nhi√™n.");
        }

        // Prosody: Ng·ªØ ƒëi·ªáu, nh·∫•n √¢m
        if (paResult.getProsodyScore() < 60) {
            adviceList.add("üìâ Ng·ªØ ƒëi·ªáu ch∆∞a t·ª± nhi√™n. H√£y h·ªçc c√°ch l√™n xu·ªëng gi·ªçng nh∆∞ ng∆∞·ªùi b·∫£n x·ª©.");
        } else if (paResult.getProsodyScore() < 85) {
            adviceList.add("üéµ Ng·ªØ ƒëi·ªáu t∆∞∆°ng ƒë·ªëi ·ªïn, n√™n luy·ªán th√™m v·ªõi c√°c b√†i ƒë·ªçc c√≥ nh·∫•n √¢m.");
        } else {
            adviceList.add("üåà Ng·ªØ ƒëi·ªáu r·∫•t t·ª± nhi√™n, tuy·ªát v·ªùi!");

        }
        // Pronunciation: T·ªïng th·ªÉ ph√°t √¢m
        if (paResult.getPronunciationScore() < 60) {
            adviceList.add("üìåT·ªïng k·∫øt: Ph√°t √¢m c√≤n y·∫øu. N√™n luy·ªán t·ª´ng ph·∫ßn k·ªπ h∆°n ƒë·ªÉ c·∫£i thi·ªán.");
        } else if (paResult.getPronunciationScore() < 85) {
            adviceList.add("üìåT·ªïng k·∫øt: Ph√°t √¢m kh√° ·ªïn, c√≥ ti·ªÅm nƒÉng c·∫£i thi·ªán l√™n m·ª©c cao h∆°n.");
        } else {
            adviceList.add("üìåT·ªïng k·∫øt: Ph√°t √¢m xu·∫•t s·∫Øc, b·∫°n ƒëang ·ªü tr√¨nh ƒë·ªô g·∫ßn nh∆∞ b·∫£n ng·ªØ.");
        }

        return adviceList;
    }

}
